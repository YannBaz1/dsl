// automatically generated by Xtext
grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/iDM_DSL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
	'Program'
	'{'
		('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	'}';

Instruction returns Instruction:
	Movement | Rotation | Loop | Condition | VariableAssignement | VariableDeclaration | FunctionDeclaration | FunctionCall;



Expression returns Expression:
	TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor;




NumberExpr returns NumberExpr:
	TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor;

Movement returns Movement:
	{Movement}
	'Movement'
	'{'
		('direction' direction=Direction)?
		('Distance' Distance=EInt)?
		('unit' unit=EString)?
	'}';

Rotation returns Rotation:
	{Rotation}
	'Rotation'
	'{'
		('angleUnit' angleUnit=AngleUnit)?
	'}';

Loop returns Loop:
	{Loop}
	'Loop'
	'{'
		('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		('booleanexpr' booleanexpr=BooleanExpr)?
	'}';

Condition returns Condition:
	{Condition}
	'Condition'
	'{'
		('then' then=[Instruction|EString])?
		('else' else=[Instruction|EString])?
		('booleanexpr' '{' booleanexpr+=BooleanExpr ( "," booleanexpr+=BooleanExpr)* '}' )?
	'}';

VariableAssignement returns VariableAssignement:
	{VariableAssignement}
	'VariableAssignement'
	'{'
		('variabledeclaration' variabledeclaration=[VariableDeclaration|EString])?
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	'}';

VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration}
	'VariableDeclaration'
	name=EString
	'{'
		('type' type=EString)?
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	'}';

FunctionDeclaration returns FunctionDeclaration:
	{FunctionDeclaration}
	'FunctionDeclaration'
	name=EString
	'{'
		('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		('returntype' returntype=ReturnType)?
	'}';

FunctionCall returns FunctionCall:
	{FunctionCall}
	'FunctionCall'
	'{'
		('functiondeclaration' functiondeclaration=[FunctionDeclaration|EString])?
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

enum Direction returns Direction:
				Front = 'Front' | Back = 'Back' | Right = 'Right' | Left = 'Left';

EInt returns ecore::EInt:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;

enum AngleUnit returns AngleUnit:
				Degre = 'Degre' | Radian = 'Radian';

BooleanExpr returns BooleanExpr:
	{BooleanExpr}
	'BooleanExpr'
	'{'
		('operator' operator=BooleanOperator)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		('right' right=Expression)?
		('left' left=Expression)?
	'}';

enum BooleanOperator returns BooleanOperator:
				AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER';

TimeSensors returns TimeSensors:
	{TimeSensors}
	'TimeSensors'
	'{'
		('unit' unit=EString)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

ArithmeticExpr returns ArithmeticExpr:
	{ArithmeticExpr}
	'ArithmeticExpr'
	'{'
		('operator' operator=Operator)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		('left' left=NumberExpr)?
		('right' right=NumberExpr)?
	'}';

IntExpression returns IntExpression:
	{IntExpression}
	'IntExpression'
	'{'
		('value' value=EInt)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

Boolean returns Boolean:
	{Boolean}
	(value?='value')?
	'Boolean'
	'{'
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

DistanceSensor returns DistanceSensor:
	{DistanceSensor}
	'DistanceSensor'
	'{'
		('unit' unit=EString)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

enum Operator returns Operator:
				ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ReturnType returns ReturnType:
	{ReturnType}
	'ReturnType'
	'{'
		('returnType' returnType=EString)?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString
	'{'
		('type' type=EString)?
		('value' value=EInt)?
		('unit' unit=EString)?
	'}';
