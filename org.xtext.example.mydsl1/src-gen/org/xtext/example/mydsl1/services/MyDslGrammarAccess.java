/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInstructionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInstructionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_3_2_0 = (RuleCall)cInstructionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cInstructionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_3_3_1_0 = (RuleCall)cInstructionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program returns Program:
		//    {Program}
		//    'Program'
		//    '{'
		//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'Program'
		//'{'
		//    ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'instruction'
		public Keyword getInstructionKeyword_3_0() { return cInstructionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_3_2() { return cInstructionAssignment_3_2; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_2_0() { return cInstructionInstructionParserRuleCall_3_2_0; }
		
		//( "," instruction+=Instruction)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_3_3_1() { return cInstructionAssignment_3_3_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_3_1_0() { return cInstructionInstructionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMovementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableAssignementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFunctionDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Instruction returns Instruction:
		//    Movement | Rotation | Loop | Condition | VariableAssignement | VariableDeclaration | FunctionDeclaration | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Movement | Rotation | Loop | Condition | VariableAssignement | VariableDeclaration | FunctionDeclaration | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Movement
		public RuleCall getMovementParserRuleCall_0() { return cMovementParserRuleCall_0; }
		
		//Rotation
		public RuleCall getRotationParserRuleCall_1() { return cRotationParserRuleCall_1; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_3() { return cConditionParserRuleCall_3; }
		
		//VariableAssignement
		public RuleCall getVariableAssignementParserRuleCall_4() { return cVariableAssignementParserRuleCall_4; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_5() { return cVariableDeclarationParserRuleCall_5; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_6() { return cFunctionDeclarationParserRuleCall_6; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_7() { return cFunctionCallParserRuleCall_7; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeSensorsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDistanceSensorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression returns Expression:
		//    TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeSensors
		public RuleCall getTimeSensorsParserRuleCall_0() { return cTimeSensorsParserRuleCall_0; }
		
		//ArithmeticExpr
		public RuleCall getArithmeticExprParserRuleCall_1() { return cArithmeticExprParserRuleCall_1; }
		
		//BooleanExpr
		public RuleCall getBooleanExprParserRuleCall_2() { return cBooleanExprParserRuleCall_2; }
		
		//IntExpression
		public RuleCall getIntExpressionParserRuleCall_3() { return cIntExpressionParserRuleCall_3; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_5() { return cDistanceSensorParserRuleCall_5; }
	}
	public class NumberExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NumberExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeSensorsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDistanceSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumberExpr returns NumberExpr:
		//    TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeSensors
		public RuleCall getTimeSensorsParserRuleCall_0() { return cTimeSensorsParserRuleCall_0; }
		
		//ArithmeticExpr
		public RuleCall getArithmeticExprParserRuleCall_1() { return cArithmeticExprParserRuleCall_1; }
		
		//IntExpression
		public RuleCall getIntExpressionParserRuleCall_2() { return cIntExpressionParserRuleCall_2; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_3() { return cDistanceSensorParserRuleCall_3; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Movement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMovementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMovementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDirectionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDirectionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDirectionDirectionEnumRuleCall_3_1_0 = (RuleCall)cDirectionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDistanceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDistanceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_4_1_0 = (RuleCall)cDistanceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnitKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_5_1_0 = (RuleCall)cUnitAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Movement returns Movement:
		//    {Movement}
		//    'Movement'
		//    '{'
		//        ('direction' direction=Direction)?
		//        ('Distance' Distance=EInt)?
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Movement}
		//'Movement'
		//'{'
		//    ('direction' direction=Direction)?
		//    ('Distance' Distance=EInt)?
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Movement}
		public Action getMovementAction_0() { return cMovementAction_0; }
		
		//'Movement'
		public Keyword getMovementKeyword_1() { return cMovementKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('direction' direction=Direction)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'direction'
		public Keyword getDirectionKeyword_3_0() { return cDirectionKeyword_3_0; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_3_1() { return cDirectionAssignment_3_1; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_3_1_0() { return cDirectionDirectionEnumRuleCall_3_1_0; }
		
		//('Distance' Distance=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Distance'
		public Keyword getDistanceKeyword_4_0() { return cDistanceKeyword_4_0; }
		
		//Distance=EInt
		public Assignment getDistanceAssignment_4_1() { return cDistanceAssignment_4_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_4_1_0() { return cDistanceEIntParserRuleCall_4_1_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'unit'
		public Keyword getUnitKeyword_5_0() { return cUnitKeyword_5_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_5_1() { return cUnitAssignment_5_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_5_1_0() { return cUnitEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRotationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAngleUnitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAngleUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAngleUnitAngleUnitEnumRuleCall_3_1_0 = (RuleCall)cAngleUnitAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rotation returns Rotation:
		//    {Rotation}
		//    'Rotation'
		//    '{'
		//        ('angleUnit' angleUnit=AngleUnit)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rotation}
		//'Rotation'
		//'{'
		//    ('angleUnit' angleUnit=AngleUnit)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Rotation}
		public Action getRotationAction_0() { return cRotationAction_0; }
		
		//'Rotation'
		public Keyword getRotationKeyword_1() { return cRotationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('angleUnit' angleUnit=AngleUnit)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'angleUnit'
		public Keyword getAngleUnitKeyword_3_0() { return cAngleUnitKeyword_3_0; }
		
		//angleUnit=AngleUnit
		public Assignment getAngleUnitAssignment_3_1() { return cAngleUnitAssignment_3_1; }
		
		//AngleUnit
		public RuleCall getAngleUnitAngleUnitEnumRuleCall_3_1_0() { return cAngleUnitAngleUnitEnumRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInstructionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInstructionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_3_2_0 = (RuleCall)cInstructionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cInstructionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_3_3_1_0 = (RuleCall)cInstructionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBooleanexprKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBooleanexprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBooleanexprBooleanExprParserRuleCall_4_1_0 = (RuleCall)cBooleanexprAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Loop returns Loop:
		//    {Loop}
		//    'Loop'
		//    '{'
		//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//        ('booleanexpr' booleanexpr=BooleanExpr)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Loop}
		//'Loop'
		//'{'
		//    ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//    ('booleanexpr' booleanexpr=BooleanExpr)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }
		
		//'Loop'
		public Keyword getLoopKeyword_1() { return cLoopKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'instruction'
		public Keyword getInstructionKeyword_3_0() { return cInstructionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_3_2() { return cInstructionAssignment_3_2; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_2_0() { return cInstructionInstructionParserRuleCall_3_2_0; }
		
		//( "," instruction+=Instruction)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_3_3_1() { return cInstructionAssignment_3_3_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_3_1_0() { return cInstructionInstructionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('booleanexpr' booleanexpr=BooleanExpr)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'booleanexpr'
		public Keyword getBooleanexprKeyword_4_0() { return cBooleanexprKeyword_4_0; }
		
		//booleanexpr=BooleanExpr
		public Assignment getBooleanexprAssignment_4_1() { return cBooleanexprAssignment_4_1; }
		
		//BooleanExpr
		public RuleCall getBooleanexprBooleanExprParserRuleCall_4_1_0() { return cBooleanexprBooleanExprParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cThenInstructionCrossReference_3_1_0 = (CrossReference)cThenAssignment_3_1.eContents().get(0);
		private final RuleCall cThenInstructionEStringParserRuleCall_3_1_0_1 = (RuleCall)cThenInstructionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cElseInstructionCrossReference_4_1_0 = (CrossReference)cElseAssignment_4_1.eContents().get(0);
		private final RuleCall cElseInstructionEStringParserRuleCall_4_1_0_1 = (RuleCall)cElseInstructionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBooleanexprKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBooleanexprAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBooleanexprBooleanExprParserRuleCall_5_2_0 = (RuleCall)cBooleanexprAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cBooleanexprAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cBooleanexprBooleanExprParserRuleCall_5_3_1_0 = (RuleCall)cBooleanexprAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Condition returns Condition:
		//    {Condition}
		//    'Condition'
		//    '{'
		//        ('then' then=[Instruction|EString])?
		//        ('else' else=[Instruction|EString])?
		//        ('booleanexpr' '{' booleanexpr+=BooleanExpr ( "," booleanexpr+=BooleanExpr)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition}
		//'Condition'
		//'{'
		//    ('then' then=[Instruction|EString])?
		//    ('else' else=[Instruction|EString])?
		//    ('booleanexpr' '{' booleanexpr+=BooleanExpr ( "," booleanexpr+=BooleanExpr)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'Condition'
		public Keyword getConditionKeyword_1() { return cConditionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('then' then=[Instruction|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }
		
		//then=[Instruction|EString]
		public Assignment getThenAssignment_3_1() { return cThenAssignment_3_1; }
		
		//[Instruction|EString]
		public CrossReference getThenInstructionCrossReference_3_1_0() { return cThenInstructionCrossReference_3_1_0; }
		
		//EString
		public RuleCall getThenInstructionEStringParserRuleCall_3_1_0_1() { return cThenInstructionEStringParserRuleCall_3_1_0_1; }
		
		//('else' else=[Instruction|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//else=[Instruction|EString]
		public Assignment getElseAssignment_4_1() { return cElseAssignment_4_1; }
		
		//[Instruction|EString]
		public CrossReference getElseInstructionCrossReference_4_1_0() { return cElseInstructionCrossReference_4_1_0; }
		
		//EString
		public RuleCall getElseInstructionEStringParserRuleCall_4_1_0_1() { return cElseInstructionEStringParserRuleCall_4_1_0_1; }
		
		//('booleanexpr' '{' booleanexpr+=BooleanExpr ( "," booleanexpr+=BooleanExpr)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'booleanexpr'
		public Keyword getBooleanexprKeyword_5_0() { return cBooleanexprKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//booleanexpr+=BooleanExpr
		public Assignment getBooleanexprAssignment_5_2() { return cBooleanexprAssignment_5_2; }
		
		//BooleanExpr
		public RuleCall getBooleanexprBooleanExprParserRuleCall_5_2_0() { return cBooleanexprBooleanExprParserRuleCall_5_2_0; }
		
		//( "," booleanexpr+=BooleanExpr)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//booleanexpr+=BooleanExpr
		public Assignment getBooleanexprAssignment_5_3_1() { return cBooleanexprAssignment_5_3_1; }
		
		//BooleanExpr
		public RuleCall getBooleanexprBooleanExprParserRuleCall_5_3_1_0() { return cBooleanexprBooleanExprParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VariableAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VariableAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableAssignementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVariabledeclarationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariabledeclarationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariabledeclarationVariableDeclarationCrossReference_3_1_0 = (CrossReference)cVariabledeclarationAssignment_3_1.eContents().get(0);
		private final RuleCall cVariabledeclarationVariableDeclarationEStringParserRuleCall_3_1_0_1 = (RuleCall)cVariabledeclarationVariableDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExpressionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_4_2_0 = (RuleCall)cExpressionAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_3_1_0 = (RuleCall)cExpressionAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VariableAssignement returns VariableAssignement:
		//    {VariableAssignement}
		//    'VariableAssignement'
		//    '{'
		//        ('variabledeclaration' variabledeclaration=[VariableDeclaration|EString])?
		//        ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableAssignement}
		//'VariableAssignement'
		//'{'
		//    ('variabledeclaration' variabledeclaration=[VariableDeclaration|EString])?
		//    ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{VariableAssignement}
		public Action getVariableAssignementAction_0() { return cVariableAssignementAction_0; }
		
		//'VariableAssignement'
		public Keyword getVariableAssignementKeyword_1() { return cVariableAssignementKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('variabledeclaration' variabledeclaration=[VariableDeclaration|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'variabledeclaration'
		public Keyword getVariabledeclarationKeyword_3_0() { return cVariabledeclarationKeyword_3_0; }
		
		//variabledeclaration=[VariableDeclaration|EString]
		public Assignment getVariabledeclarationAssignment_3_1() { return cVariabledeclarationAssignment_3_1; }
		
		//[VariableDeclaration|EString]
		public CrossReference getVariabledeclarationVariableDeclarationCrossReference_3_1_0() { return cVariabledeclarationVariableDeclarationCrossReference_3_1_0; }
		
		//EString
		public RuleCall getVariabledeclarationVariableDeclarationEStringParserRuleCall_3_1_0_1() { return cVariabledeclarationVariableDeclarationEStringParserRuleCall_3_1_0_1; }
		
		//('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'expression'
		public Keyword getExpressionKeyword_4_0() { return cExpressionKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4_2() { return cExpressionAssignment_4_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_2_0() { return cExpressionExpressionParserRuleCall_4_2_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4_3_1() { return cExpressionAssignment_4_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_3_1_0() { return cExpressionExpressionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExpressionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_5_2_0 = (RuleCall)cExpressionAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cExpressionAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_3_1_0 = (RuleCall)cExpressionAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VariableDeclaration returns VariableDeclaration:
		//    {VariableDeclaration}
		//    'VariableDeclaration'
		//    name=EString
		//    '{'
		//        ('type' type=EString)?
		//        ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDeclaration}
		//'VariableDeclaration'
		//name=EString
		//'{'
		//    ('type' type=EString)?
		//    ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }
		
		//'VariableDeclaration'
		public Keyword getVariableDeclarationKeyword_1() { return cVariableDeclarationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('type' type=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=EString
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_4_1_0() { return cTypeEStringParserRuleCall_4_1_0; }
		
		//('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'expression'
		public Keyword getExpressionKeyword_5_0() { return cExpressionKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_2() { return cExpressionAssignment_5_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_2_0() { return cExpressionExpressionParserRuleCall_5_2_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_3_1() { return cExpressionAssignment_5_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_3_1_0() { return cExpressionExpressionParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInstructionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInstructionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_4_2_0 = (RuleCall)cInstructionAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInstructionAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_4_3_1_0 = (RuleCall)cInstructionAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturntypeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturntypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturntypeReturnTypeParserRuleCall_5_1_0 = (RuleCall)cReturntypeAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FunctionDeclaration returns FunctionDeclaration:
		//    {FunctionDeclaration}
		//    'FunctionDeclaration'
		//    name=EString
		//    '{'
		//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//        ('returntype' returntype=ReturnType)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDeclaration}
		//'FunctionDeclaration'
		//name=EString
		//'{'
		//    ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//    ('returntype' returntype=ReturnType)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }
		
		//'FunctionDeclaration'
		public Keyword getFunctionDeclarationKeyword_1() { return cFunctionDeclarationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'instruction'
		public Keyword getInstructionKeyword_4_0() { return cInstructionKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_4_2() { return cInstructionAssignment_4_2; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_4_2_0() { return cInstructionInstructionParserRuleCall_4_2_0; }
		
		//( "," instruction+=Instruction)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_4_3_1() { return cInstructionAssignment_4_3_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_4_3_1_0() { return cInstructionInstructionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('returntype' returntype=ReturnType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'returntype'
		public Keyword getReturntypeKeyword_5_0() { return cReturntypeKeyword_5_0; }
		
		//returntype=ReturnType
		public Assignment getReturntypeAssignment_5_1() { return cReturntypeAssignment_5_1; }
		
		//ReturnType
		public RuleCall getReturntypeReturnTypeParserRuleCall_5_1_0() { return cReturntypeReturnTypeParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctiondeclarationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctiondeclarationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFunctiondeclarationFunctionDeclarationCrossReference_3_1_0 = (CrossReference)cFunctiondeclarationAssignment_3_1.eContents().get(0);
		private final RuleCall cFunctiondeclarationFunctionDeclarationEStringParserRuleCall_3_1_0_1 = (RuleCall)cFunctiondeclarationFunctionDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParameterKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParameterAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_4_2_0 = (RuleCall)cParameterAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParameterAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_4_3_1_0 = (RuleCall)cParameterAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionCall returns FunctionCall:
		//    {FunctionCall}
		//    'FunctionCall'
		//    '{'
		//        ('functiondeclaration' functiondeclaration=[FunctionDeclaration|EString])?
		//        ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall}
		//'FunctionCall'
		//'{'
		//    ('functiondeclaration' functiondeclaration=[FunctionDeclaration|EString])?
		//    ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//'FunctionCall'
		public Keyword getFunctionCallKeyword_1() { return cFunctionCallKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('functiondeclaration' functiondeclaration=[FunctionDeclaration|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'functiondeclaration'
		public Keyword getFunctiondeclarationKeyword_3_0() { return cFunctiondeclarationKeyword_3_0; }
		
		//functiondeclaration=[FunctionDeclaration|EString]
		public Assignment getFunctiondeclarationAssignment_3_1() { return cFunctiondeclarationAssignment_3_1; }
		
		//[FunctionDeclaration|EString]
		public CrossReference getFunctiondeclarationFunctionDeclarationCrossReference_3_1_0() { return cFunctiondeclarationFunctionDeclarationCrossReference_3_1_0; }
		
		//EString
		public RuleCall getFunctiondeclarationFunctionDeclarationEStringParserRuleCall_3_1_0_1() { return cFunctiondeclarationFunctionDeclarationEStringParserRuleCall_3_1_0_1; }
		
		//('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameter'
		public Keyword getParameterKeyword_4_0() { return cParameterKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_4_2() { return cParameterAssignment_4_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_2_0() { return cParameterParameterParserRuleCall_4_2_0; }
		
		//( "," parameter+=Parameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_4_3_1() { return cParameterAssignment_4_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_3_1_0() { return cParameterParameterParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class BooleanExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BooleanExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperatorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperatorBooleanOperatorEnumRuleCall_3_1_0 = (RuleCall)cOperatorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRightKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLeftAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_6_1_0 = (RuleCall)cLeftAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BooleanExpr returns BooleanExpr:
		//    {BooleanExpr}
		//    'BooleanExpr'
		//    '{'
		//        ('operator' operator=BooleanOperator)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//        ('right' right=Expression)?
		//        ('left' left=Expression)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExpr}
		//'BooleanExpr'
		//'{'
		//    ('operator' operator=BooleanOperator)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    ('right' right=Expression)?
		//    ('left' left=Expression)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{BooleanExpr}
		public Action getBooleanExprAction_0() { return cBooleanExprAction_0; }
		
		//'BooleanExpr'
		public Keyword getBooleanExprKeyword_1() { return cBooleanExprKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('operator' operator=BooleanOperator)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'operator'
		public Keyword getOperatorKeyword_3_0() { return cOperatorKeyword_3_0; }
		
		//operator=BooleanOperator
		public Assignment getOperatorAssignment_3_1() { return cOperatorAssignment_3_1; }
		
		//BooleanOperator
		public RuleCall getOperatorBooleanOperatorEnumRuleCall_3_1_0() { return cOperatorBooleanOperatorEnumRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('right' right=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'right'
		public Keyword getRightKeyword_5_0() { return cRightKeyword_5_0; }
		
		//right=Expression
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_5_1_0() { return cRightExpressionParserRuleCall_5_1_0; }
		
		//('left' left=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'left'
		public Keyword getLeftKeyword_6_0() { return cLeftKeyword_6_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_6_1() { return cLeftAssignment_6_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_6_1_0() { return cLeftExpressionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TimeSensorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TimeSensors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeSensorsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeSensorsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_0 = (RuleCall)cUnitAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeSensors returns TimeSensors:
		//    {TimeSensors}
		//    'TimeSensors'
		//    '{'
		//        ('unit' unit=EString)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeSensors}
		//'TimeSensors'
		//'{'
		//    ('unit' unit=EString)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{TimeSensors}
		public Action getTimeSensorsAction_0() { return cTimeSensorsAction_0; }
		
		//'TimeSensors'
		public Keyword getTimeSensorsKeyword_1() { return cTimeSensorsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('unit' unit=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'unit'
		public Keyword getUnitKeyword_3_0() { return cUnitKeyword_3_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1() { return cUnitAssignment_3_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_0() { return cUnitEStringParserRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ArithmeticExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArithmeticExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArithmeticExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArithmeticExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperatorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_3_1_0 = (RuleCall)cOperatorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLeftAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLeftNumberExprParserRuleCall_5_1_0 = (RuleCall)cLeftAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRightKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRightAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRightNumberExprParserRuleCall_6_1_0 = (RuleCall)cRightAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ArithmeticExpr returns ArithmeticExpr:
		//    {ArithmeticExpr}
		//    'ArithmeticExpr'
		//    '{'
		//        ('operator' operator=Operator)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//        ('left' left=NumberExpr)?
		//        ('right' right=NumberExpr)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArithmeticExpr}
		//'ArithmeticExpr'
		//'{'
		//    ('operator' operator=Operator)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    ('left' left=NumberExpr)?
		//    ('right' right=NumberExpr)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ArithmeticExpr}
		public Action getArithmeticExprAction_0() { return cArithmeticExprAction_0; }
		
		//'ArithmeticExpr'
		public Keyword getArithmeticExprKeyword_1() { return cArithmeticExprKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('operator' operator=Operator)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'operator'
		public Keyword getOperatorKeyword_3_0() { return cOperatorKeyword_3_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_3_1() { return cOperatorAssignment_3_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_3_1_0() { return cOperatorOperatorEnumRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('left' left=NumberExpr)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'left'
		public Keyword getLeftKeyword_5_0() { return cLeftKeyword_5_0; }
		
		//left=NumberExpr
		public Assignment getLeftAssignment_5_1() { return cLeftAssignment_5_1; }
		
		//NumberExpr
		public RuleCall getLeftNumberExprParserRuleCall_5_1_0() { return cLeftNumberExprParserRuleCall_5_1_0; }
		
		//('right' right=NumberExpr)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'right'
		public Keyword getRightKeyword_6_0() { return cRightKeyword_6_0; }
		
		//right=NumberExpr
		public Assignment getRightAssignment_6_1() { return cRightAssignment_6_1; }
		
		//NumberExpr
		public RuleCall getRightNumberExprParserRuleCall_6_1_0() { return cRightNumberExprParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IntExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IntExpression returns IntExpression:
		//    {IntExpression}
		//    'IntExpression'
		//    '{'
		//        ('value' value=EInt)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntExpression}
		//'IntExpression'
		//'{'
		//    ('value' value=EInt)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{IntExpression}
		public Action getIntExpressionAction_0() { return cIntExpressionAction_0; }
		
		//'IntExpression'
		public Keyword getIntExpressionKeyword_1() { return cIntExpressionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EInt
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_1_0() { return cValueEIntParserRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Keyword cBooleanKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Boolean returns Boolean:
		//    {Boolean}
		//    (value?='value')?
		//    'Boolean'
		//    '{'
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean}
		//(value?='value')?
		//'Boolean'
		//'{'
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//(value?='value')?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'value'
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DistanceSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DistanceSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDistanceSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDistanceSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_0 = (RuleCall)cUnitAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DistanceSensor returns DistanceSensor:
		//    {DistanceSensor}
		//    'DistanceSensor'
		//    '{'
		//        ('unit' unit=EString)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DistanceSensor}
		//'DistanceSensor'
		//'{'
		//    ('unit' unit=EString)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DistanceSensor}
		public Action getDistanceSensorAction_0() { return cDistanceSensorAction_0; }
		
		//'DistanceSensor'
		public Keyword getDistanceSensorKeyword_1() { return cDistanceSensorKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('unit' unit=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'unit'
		public Keyword getUnitKeyword_3_0() { return cUnitKeyword_3_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1() { return cUnitAssignment_3_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_0() { return cUnitEStringParserRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ReturnType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReturnTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReturnTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReturnTypeEStringParserRuleCall_3_1_0 = (RuleCall)cReturnTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReturnType returns ReturnType:
		//    {ReturnType}
		//    'ReturnType'
		//    '{'
		//        ('returnType' returnType=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnType}
		//'ReturnType'
		//'{'
		//    ('returnType' returnType=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ReturnType}
		public Action getReturnTypeAction_0() { return cReturnTypeAction_0; }
		
		//'ReturnType'
		public Keyword getReturnTypeKeyword_1() { return cReturnTypeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('returnType' returnType=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'returnType'
		public Keyword getReturnTypeKeyword_3_0() { return cReturnTypeKeyword_3_0; }
		
		//returnType=EString
		public Assignment getReturnTypeAssignment_3_1() { return cReturnTypeAssignment_3_1; }
		
		//EString
		public RuleCall getReturnTypeEStringParserRuleCall_3_1_0() { return cReturnTypeEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cValueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUnitKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cUnitAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_6_1_0 = (RuleCall)cUnitAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Parameter returns Parameter:
		//    {Parameter}
		//    'Parameter'
		//    name=EString
		//    '{'
		//        ('type' type=EString)?
		//        ('value' value=EInt)?
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter}
		//'Parameter'
		//name=EString
		//'{'
		//    ('type' type=EString)?
		//    ('value' value=EInt)?
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'Parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('type' type=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=EString
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_4_1_0() { return cTypeEStringParserRuleCall_4_1_0; }
		
		//('value' value=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'value'
		public Keyword getValueKeyword_5_0() { return cValueKeyword_5_0; }
		
		//value=EInt
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_5_1_0() { return cValueEIntParserRuleCall_5_1_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'unit'
		public Keyword getUnitKeyword_6_0() { return cUnitKeyword_6_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_6_1() { return cUnitAssignment_6_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_6_1_0() { return cUnitEStringParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFrontEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFrontFrontKeyword_0_0 = (Keyword)cFrontEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackBackKeyword_1_0 = (Keyword)cBackEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRightRightKeyword_2_0 = (Keyword)cRightEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLeftLeftKeyword_3_0 = (Keyword)cLeftEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Direction returns Direction:
		//                Front = 'Front' | Back = 'Back' | Right = 'Right' | Left = 'Left';
		public EnumRule getRule() { return rule; }
		
		//Front = 'Front' | Back = 'Back' | Right = 'Right' | Left = 'Left'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Front = 'Front'
		public EnumLiteralDeclaration getFrontEnumLiteralDeclaration_0() { return cFrontEnumLiteralDeclaration_0; }
		
		//'Front'
		public Keyword getFrontFrontKeyword_0_0() { return cFrontFrontKeyword_0_0; }
		
		//Back = 'Back'
		public EnumLiteralDeclaration getBackEnumLiteralDeclaration_1() { return cBackEnumLiteralDeclaration_1; }
		
		//'Back'
		public Keyword getBackBackKeyword_1_0() { return cBackBackKeyword_1_0; }
		
		//Right = 'Right'
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_2() { return cRightEnumLiteralDeclaration_2; }
		
		//'Right'
		public Keyword getRightRightKeyword_2_0() { return cRightRightKeyword_2_0; }
		
		//Left = 'Left'
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_3() { return cLeftEnumLiteralDeclaration_3; }
		
		//'Left'
		public Keyword getLeftLeftKeyword_3_0() { return cLeftLeftKeyword_3_0; }
	}
	public class AngleUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AngleUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDegreEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDegreDegreKeyword_0_0 = (Keyword)cDegreEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRadianEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRadianRadianKeyword_1_0 = (Keyword)cRadianEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AngleUnit returns AngleUnit:
		//                Degre = 'Degre' | Radian = 'Radian';
		public EnumRule getRule() { return rule; }
		
		//Degre = 'Degre' | Radian = 'Radian'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Degre = 'Degre'
		public EnumLiteralDeclaration getDegreEnumLiteralDeclaration_0() { return cDegreEnumLiteralDeclaration_0; }
		
		//'Degre'
		public Keyword getDegreDegreKeyword_0_0() { return cDegreDegreKeyword_0_0; }
		
		//Radian = 'Radian'
		public EnumLiteralDeclaration getRadianEnumLiteralDeclaration_1() { return cRadianEnumLiteralDeclaration_1; }
		
		//'Radian'
		public Keyword getRadianRadianKeyword_1_0() { return cRadianRadianKeyword_1_0; }
	}
	public class BooleanOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTNOTKeyword_2_0 = (Keyword)cNOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUALSEQUALSKeyword_3_0 = (Keyword)cEQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESSLESSKeyword_4_0 = (Keyword)cLESSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATERGREATERKeyword_5_0 = (Keyword)cGREATEREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BooleanOperator returns BooleanOperator:
		//                AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER';
		public EnumRule getRule() { return rule; }
		
		//AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
		
		//NOT = 'NOT'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_2() { return cNOTEnumLiteralDeclaration_2; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_2_0() { return cNOTNOTKeyword_2_0; }
		
		//EQUALS = 'EQUALS'
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_3() { return cEQUALSEnumLiteralDeclaration_3; }
		
		//'EQUALS'
		public Keyword getEQUALSEQUALSKeyword_3_0() { return cEQUALSEQUALSKeyword_3_0; }
		
		//LESS = 'LESS'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_4() { return cLESSEnumLiteralDeclaration_4; }
		
		//'LESS'
		public Keyword getLESSLESSKeyword_4_0() { return cLESSLESSKeyword_4_0; }
		
		//GREATER = 'GREATER'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_5() { return cGREATEREnumLiteralDeclaration_5; }
		
		//'GREATER'
		public Keyword getGREATERGREATERKeyword_5_0() { return cGREATERGREATERKeyword_5_0; }
	}
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDADDKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBSUBKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULMULKeyword_2_0 = (Keyword)cMULEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVDIVKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Operator returns Operator:
		//                ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV';
		public EnumRule getRule() { return rule; }
		
		//ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD = 'ADD'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'ADD'
		public Keyword getADDADDKeyword_0_0() { return cADDADDKeyword_0_0; }
		
		//SUB = 'SUB'
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//'SUB'
		public Keyword getSUBSUBKeyword_1_0() { return cSUBSUBKeyword_1_0; }
		
		//MUL = 'MUL'
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_2() { return cMULEnumLiteralDeclaration_2; }
		
		//'MUL'
		public Keyword getMULMULKeyword_2_0() { return cMULMULKeyword_2_0; }
		
		//DIV = 'DIV'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }
		
		//'DIV'
		public Keyword getDIVDIVKeyword_3_0() { return cDIVDIVKeyword_3_0; }
	}
	
	private final ProgramElements pProgram;
	private final InstructionElements pInstruction;
	private final ExpressionElements pExpression;
	private final NumberExprElements pNumberExpr;
	private final MovementElements pMovement;
	private final RotationElements pRotation;
	private final LoopElements pLoop;
	private final ConditionElements pCondition;
	private final VariableAssignementElements pVariableAssignement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final FunctionCallElements pFunctionCall;
	private final DirectionElements eDirection;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final AngleUnitElements eAngleUnit;
	private final BooleanExprElements pBooleanExpr;
	private final BooleanOperatorElements eBooleanOperator;
	private final TimeSensorsElements pTimeSensors;
	private final ArithmeticExprElements pArithmeticExpr;
	private final IntExpressionElements pIntExpression;
	private final BooleanElements pBoolean;
	private final DistanceSensorElements pDistanceSensor;
	private final OperatorElements eOperator;
	private final EBooleanElements pEBoolean;
	private final ReturnTypeElements pReturnType;
	private final ParameterElements pParameter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pInstruction = new InstructionElements();
		this.pExpression = new ExpressionElements();
		this.pNumberExpr = new NumberExprElements();
		this.pMovement = new MovementElements();
		this.pRotation = new RotationElements();
		this.pLoop = new LoopElements();
		this.pCondition = new ConditionElements();
		this.pVariableAssignement = new VariableAssignementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pFunctionCall = new FunctionCallElements();
		this.eDirection = new DirectionElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.eAngleUnit = new AngleUnitElements();
		this.pBooleanExpr = new BooleanExprElements();
		this.eBooleanOperator = new BooleanOperatorElements();
		this.pTimeSensors = new TimeSensorsElements();
		this.pArithmeticExpr = new ArithmeticExprElements();
		this.pIntExpression = new IntExpressionElements();
		this.pBoolean = new BooleanElements();
		this.pDistanceSensor = new DistanceSensorElements();
		this.eOperator = new OperatorElements();
		this.pEBoolean = new EBooleanElements();
		this.pReturnType = new ReturnTypeElements();
		this.pParameter = new ParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'Program'
	//    '{'
	//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	//    '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Instruction returns Instruction:
	//    Movement | Rotation | Loop | Condition | VariableAssignement | VariableDeclaration | FunctionDeclaration | FunctionCall;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Expression returns Expression:
	//    TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//NumberExpr returns NumberExpr:
	//    TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor;
	public NumberExprElements getNumberExprAccess() {
		return pNumberExpr;
	}
	
	public ParserRule getNumberExprRule() {
		return getNumberExprAccess().getRule();
	}
	
	//Movement returns Movement:
	//    {Movement}
	//    'Movement'
	//    '{'
	//        ('direction' direction=Direction)?
	//        ('Distance' Distance=EInt)?
	//        ('unit' unit=EString)?
	//    '}';
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//Rotation returns Rotation:
	//    {Rotation}
	//    'Rotation'
	//    '{'
	//        ('angleUnit' angleUnit=AngleUnit)?
	//    '}';
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Loop returns Loop:
	//    {Loop}
	//    'Loop'
	//    '{'
	//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	//        ('booleanexpr' booleanexpr=BooleanExpr)?
	//    '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Condition returns Condition:
	//    {Condition}
	//    'Condition'
	//    '{'
	//        ('then' then=[Instruction|EString])?
	//        ('else' else=[Instruction|EString])?
	//        ('booleanexpr' '{' booleanexpr+=BooleanExpr ( "," booleanexpr+=BooleanExpr)* '}' )?
	//    '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//VariableAssignement returns VariableAssignement:
	//    {VariableAssignement}
	//    'VariableAssignement'
	//    '{'
	//        ('variabledeclaration' variabledeclaration=[VariableDeclaration|EString])?
	//        ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	//    '}';
	public VariableAssignementElements getVariableAssignementAccess() {
		return pVariableAssignement;
	}
	
	public ParserRule getVariableAssignementRule() {
		return getVariableAssignementAccess().getRule();
	}
	
	//VariableDeclaration returns VariableDeclaration:
	//    {VariableDeclaration}
	//    'VariableDeclaration'
	//    name=EString
	//    '{'
	//        ('type' type=EString)?
	//        ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	//    '}';
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//FunctionDeclaration returns FunctionDeclaration:
	//    {FunctionDeclaration}
	//    'FunctionDeclaration'
	//    name=EString
	//    '{'
	//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	//        ('returntype' returntype=ReturnType)?
	//    '}';
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//FunctionCall returns FunctionCall:
	//    {FunctionCall}
	//    'FunctionCall'
	//    '{'
	//        ('functiondeclaration' functiondeclaration=[FunctionDeclaration|EString])?
	//        ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	//    '}';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//enum Direction returns Direction:
	//                Front = 'Front' | Back = 'Back' | Right = 'Right' | Left = 'Left';
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum AngleUnit returns AngleUnit:
	//                Degre = 'Degre' | Radian = 'Radian';
	public AngleUnitElements getAngleUnitAccess() {
		return eAngleUnit;
	}
	
	public EnumRule getAngleUnitRule() {
		return getAngleUnitAccess().getRule();
	}
	
	//BooleanExpr returns BooleanExpr:
	//    {BooleanExpr}
	//    'BooleanExpr'
	//    '{'
	//        ('operator' operator=BooleanOperator)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//        ('right' right=Expression)?
	//        ('left' left=Expression)?
	//    '}';
	public BooleanExprElements getBooleanExprAccess() {
		return pBooleanExpr;
	}
	
	public ParserRule getBooleanExprRule() {
		return getBooleanExprAccess().getRule();
	}
	
	//enum BooleanOperator returns BooleanOperator:
	//                AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER';
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return eBooleanOperator;
	}
	
	public EnumRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//TimeSensors returns TimeSensors:
	//    {TimeSensors}
	//    'TimeSensors'
	//    '{'
	//        ('unit' unit=EString)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public TimeSensorsElements getTimeSensorsAccess() {
		return pTimeSensors;
	}
	
	public ParserRule getTimeSensorsRule() {
		return getTimeSensorsAccess().getRule();
	}
	
	//ArithmeticExpr returns ArithmeticExpr:
	//    {ArithmeticExpr}
	//    'ArithmeticExpr'
	//    '{'
	//        ('operator' operator=Operator)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//        ('left' left=NumberExpr)?
	//        ('right' right=NumberExpr)?
	//    '}';
	public ArithmeticExprElements getArithmeticExprAccess() {
		return pArithmeticExpr;
	}
	
	public ParserRule getArithmeticExprRule() {
		return getArithmeticExprAccess().getRule();
	}
	
	//IntExpression returns IntExpression:
	//    {IntExpression}
	//    'IntExpression'
	//    '{'
	//        ('value' value=EInt)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//Boolean returns Boolean:
	//    {Boolean}
	//    (value?='value')?
	//    'Boolean'
	//    '{'
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//DistanceSensor returns DistanceSensor:
	//    {DistanceSensor}
	//    'DistanceSensor'
	//    '{'
	//        ('unit' unit=EString)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public DistanceSensorElements getDistanceSensorAccess() {
		return pDistanceSensor;
	}
	
	public ParserRule getDistanceSensorRule() {
		return getDistanceSensorAccess().getRule();
	}
	
	//enum Operator returns Operator:
	//                ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV';
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//ReturnType returns ReturnType:
	//    {ReturnType}
	//    'ReturnType'
	//    '{'
	//        ('returnType' returnType=EString)?
	//    '}';
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    {Parameter}
	//    'Parameter'
	//    name=EString
	//    '{'
	//        ('type' type=EString)?
	//        ('value' value=EInt)?
	//        ('unit' unit=EString)?
	//    '}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
