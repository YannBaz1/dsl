/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ArithmeticExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArithmeticExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArithmeticExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArithmeticExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperatorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_3_1_0 = (RuleCall)cOperatorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLeftAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLeftNumberExprParserRuleCall_5_1_0 = (RuleCall)cLeftAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRightKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRightAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRightNumberExprParserRuleCall_6_1_0 = (RuleCall)cRightAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ArithmeticExpr returns ArithmeticExpr:
		//    {ArithmeticExpr}
		//    'ArithmeticExpr'
		//    '{'
		//        ('operator' operator=Operator)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//        ('left' left=NumberExpr)?
		//        ('right' right=NumberExpr)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArithmeticExpr}
		//'ArithmeticExpr'
		//'{'
		//    ('operator' operator=Operator)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    ('left' left=NumberExpr)?
		//    ('right' right=NumberExpr)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ArithmeticExpr}
		public Action getArithmeticExprAction_0() { return cArithmeticExprAction_0; }
		
		//'ArithmeticExpr'
		public Keyword getArithmeticExprKeyword_1() { return cArithmeticExprKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('operator' operator=Operator)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'operator'
		public Keyword getOperatorKeyword_3_0() { return cOperatorKeyword_3_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_3_1() { return cOperatorAssignment_3_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_3_1_0() { return cOperatorOperatorEnumRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('left' left=NumberExpr)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'left'
		public Keyword getLeftKeyword_5_0() { return cLeftKeyword_5_0; }
		
		//left=NumberExpr
		public Assignment getLeftAssignment_5_1() { return cLeftAssignment_5_1; }
		
		//NumberExpr
		public RuleCall getLeftNumberExprParserRuleCall_5_1_0() { return cLeftNumberExprParserRuleCall_5_1_0; }
		
		//('right' right=NumberExpr)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'right'
		public Keyword getRightKeyword_6_0() { return cRightKeyword_6_0; }
		
		//right=NumberExpr
		public Assignment getRightAssignment_6_1() { return cRightAssignment_6_1; }
		
		//NumberExpr
		public RuleCall getRightNumberExprParserRuleCall_6_1_0() { return cRightNumberExprParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class NumberExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NumberExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeSensorsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDistanceSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumberExpr returns NumberExpr:
		//    TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeSensors
		public RuleCall getTimeSensorsParserRuleCall_0() { return cTimeSensorsParserRuleCall_0; }
		
		//ArithmeticExpr
		public RuleCall getArithmeticExprParserRuleCall_1() { return cArithmeticExprParserRuleCall_1; }
		
		//IntExpression
		public RuleCall getIntExpressionParserRuleCall_2() { return cIntExpressionParserRuleCall_2; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_3() { return cDistanceSensorParserRuleCall_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeSensorsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDistanceSensorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression returns Expression:
		//    TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeSensors
		public RuleCall getTimeSensorsParserRuleCall_0() { return cTimeSensorsParserRuleCall_0; }
		
		//ArithmeticExpr
		public RuleCall getArithmeticExprParserRuleCall_1() { return cArithmeticExprParserRuleCall_1; }
		
		//BooleanExpr
		public RuleCall getBooleanExprParserRuleCall_2() { return cBooleanExprParserRuleCall_2; }
		
		//IntExpression
		public RuleCall getIntExpressionParserRuleCall_3() { return cIntExpressionParserRuleCall_3; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_5() { return cDistanceSensorParserRuleCall_5; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExpressionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_5_2_0 = (RuleCall)cExpressionAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cExpressionAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_3_1_0 = (RuleCall)cExpressionAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VariableDeclaration returns VariableDeclaration:
		//    {VariableDeclaration}
		//    'VariableDeclaration'
		//    name=EString
		//    '{'
		//        ('type' type=EString)?
		//        ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDeclaration}
		//'VariableDeclaration'
		//name=EString
		//'{'
		//    ('type' type=EString)?
		//    ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{VariableDeclaration}
		public Action getVariableDeclarationAction_0() { return cVariableDeclarationAction_0; }
		
		//'VariableDeclaration'
		public Keyword getVariableDeclarationKeyword_1() { return cVariableDeclarationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('type' type=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=EString
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_4_1_0() { return cTypeEStringParserRuleCall_4_1_0; }
		
		//('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'expression'
		public Keyword getExpressionKeyword_5_0() { return cExpressionKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_2() { return cExpressionAssignment_5_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_2_0() { return cExpressionExpressionParserRuleCall_5_2_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_3_1() { return cExpressionAssignment_5_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_3_1_0() { return cExpressionExpressionParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TimeSensorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TimeSensors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeSensorsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeSensorsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_0 = (RuleCall)cUnitAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeSensors returns TimeSensors:
		//    {TimeSensors}
		//    'TimeSensors'
		//    '{'
		//        ('unit' unit=EString)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeSensors}
		//'TimeSensors'
		//'{'
		//    ('unit' unit=EString)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{TimeSensors}
		public Action getTimeSensorsAction_0() { return cTimeSensorsAction_0; }
		
		//'TimeSensors'
		public Keyword getTimeSensorsKeyword_1() { return cTimeSensorsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('unit' unit=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'unit'
		public Keyword getUnitKeyword_3_0() { return cUnitKeyword_3_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1() { return cUnitAssignment_3_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_0() { return cUnitEStringParserRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BooleanExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanExprKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperatorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperatorBooleanOperatorEnumRuleCall_3_1_0 = (RuleCall)cOperatorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRightKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLeftAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_6_1_0 = (RuleCall)cLeftAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BooleanExpr returns BooleanExpr:
		//    {BooleanExpr}
		//    'BooleanExpr'
		//    '{'
		//        ('operator' operator=BooleanOperator)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//        ('right' right=Expression)?
		//        ('left' left=Expression)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExpr}
		//'BooleanExpr'
		//'{'
		//    ('operator' operator=BooleanOperator)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    ('right' right=Expression)?
		//    ('left' left=Expression)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{BooleanExpr}
		public Action getBooleanExprAction_0() { return cBooleanExprAction_0; }
		
		//'BooleanExpr'
		public Keyword getBooleanExprKeyword_1() { return cBooleanExprKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('operator' operator=BooleanOperator)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'operator'
		public Keyword getOperatorKeyword_3_0() { return cOperatorKeyword_3_0; }
		
		//operator=BooleanOperator
		public Assignment getOperatorAssignment_3_1() { return cOperatorAssignment_3_1; }
		
		//BooleanOperator
		public RuleCall getOperatorBooleanOperatorEnumRuleCall_3_1_0() { return cOperatorBooleanOperatorEnumRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('right' right=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'right'
		public Keyword getRightKeyword_5_0() { return cRightKeyword_5_0; }
		
		//right=Expression
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_5_1_0() { return cRightExpressionParserRuleCall_5_1_0; }
		
		//('left' left=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'left'
		public Keyword getLeftKeyword_6_0() { return cLeftKeyword_6_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_6_1() { return cLeftAssignment_6_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_6_1_0() { return cLeftExpressionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IntExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IntExpression returns IntExpression:
		//    {IntExpression}
		//    'IntExpression'
		//    '{'
		//        ('value' value=EInt)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntExpression}
		//'IntExpression'
		//'{'
		//    ('value' value=EInt)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{IntExpression}
		public Action getIntExpressionAction_0() { return cIntExpressionAction_0; }
		
		//'IntExpression'
		public Keyword getIntExpressionKeyword_1() { return cIntExpressionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EInt
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_1_0() { return cValueEIntParserRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Keyword cBooleanKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Boolean returns Boolean:
		//    {Boolean}
		//    (value?='value')?
		//    'Boolean'
		//    '{'
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean}
		//(value?='value')?
		//'Boolean'
		//'{'
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//(value?='value')?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'value'
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DistanceSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DistanceSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDistanceSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDistanceSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_0 = (RuleCall)cUnitAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNewvariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cNewvariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_2_0 = (RuleCall)cNewvariableAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cNewvariableAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cNewvariableVariableDeclarationParserRuleCall_4_3_1_0 = (RuleCall)cNewvariableAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DistanceSensor returns DistanceSensor:
		//    {DistanceSensor}
		//    'DistanceSensor'
		//    '{'
		//        ('unit' unit=EString)?
		//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DistanceSensor}
		//'DistanceSensor'
		//'{'
		//    ('unit' unit=EString)?
		//    ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DistanceSensor}
		public Action getDistanceSensorAction_0() { return cDistanceSensorAction_0; }
		
		//'DistanceSensor'
		public Keyword getDistanceSensorKeyword_1() { return cDistanceSensorKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('unit' unit=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'unit'
		public Keyword getUnitKeyword_3_0() { return cUnitKeyword_3_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1() { return cUnitAssignment_3_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_0() { return cUnitEStringParserRuleCall_3_1_0; }
		
		//('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'newvariable'
		public Keyword getNewvariableKeyword_4_0() { return cNewvariableKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_2() { return cNewvariableAssignment_4_2; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_2_0() { return cNewvariableVariableDeclarationParserRuleCall_4_2_0; }
		
		//( "," newvariable+=VariableDeclaration)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//newvariable+=VariableDeclaration
		public Assignment getNewvariableAssignment_4_3_1() { return cNewvariableAssignment_4_3_1; }
		
		//VariableDeclaration
		public RuleCall getNewvariableVariableDeclarationParserRuleCall_4_3_1_0() { return cNewvariableVariableDeclarationParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDADDKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBSUBKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULMULKeyword_2_0 = (Keyword)cMULEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVDIVKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Operator returns Operator:
		//                ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV';
		public EnumRule getRule() { return rule; }
		
		//ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD = 'ADD'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'ADD'
		public Keyword getADDADDKeyword_0_0() { return cADDADDKeyword_0_0; }
		
		//SUB = 'SUB'
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//'SUB'
		public Keyword getSUBSUBKeyword_1_0() { return cSUBSUBKeyword_1_0; }
		
		//MUL = 'MUL'
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_2() { return cMULEnumLiteralDeclaration_2; }
		
		//'MUL'
		public Keyword getMULMULKeyword_2_0() { return cMULMULKeyword_2_0; }
		
		//DIV = 'DIV'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }
		
		//'DIV'
		public Keyword getDIVDIVKeyword_3_0() { return cDIVDIVKeyword_3_0; }
	}
	public class BooleanOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTNOTKeyword_2_0 = (Keyword)cNOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUALSEQUALSKeyword_3_0 = (Keyword)cEQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESSLESSKeyword_4_0 = (Keyword)cLESSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATERGREATERKeyword_5_0 = (Keyword)cGREATEREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BooleanOperator returns BooleanOperator:
		//                AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER';
		public EnumRule getRule() { return rule; }
		
		//AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
		
		//NOT = 'NOT'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_2() { return cNOTEnumLiteralDeclaration_2; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_2_0() { return cNOTNOTKeyword_2_0; }
		
		//EQUALS = 'EQUALS'
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_3() { return cEQUALSEnumLiteralDeclaration_3; }
		
		//'EQUALS'
		public Keyword getEQUALSEQUALSKeyword_3_0() { return cEQUALSEQUALSKeyword_3_0; }
		
		//LESS = 'LESS'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_4() { return cLESSEnumLiteralDeclaration_4; }
		
		//'LESS'
		public Keyword getLESSLESSKeyword_4_0() { return cLESSLESSKeyword_4_0; }
		
		//GREATER = 'GREATER'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_5() { return cGREATEREnumLiteralDeclaration_5; }
		
		//'GREATER'
		public Keyword getGREATERGREATERKeyword_5_0() { return cGREATERGREATERKeyword_5_0; }
	}
	
	private final ArithmeticExprElements pArithmeticExpr;
	private final NumberExprElements pNumberExpr;
	private final ExpressionElements pExpression;
	private final VariableDeclarationElements pVariableDeclaration;
	private final OperatorElements eOperator;
	private final EStringElements pEString;
	private final TimeSensorsElements pTimeSensors;
	private final BooleanExprElements pBooleanExpr;
	private final IntExpressionElements pIntExpression;
	private final BooleanElements pBoolean;
	private final DistanceSensorElements pDistanceSensor;
	private final BooleanOperatorElements eBooleanOperator;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArithmeticExpr = new ArithmeticExprElements();
		this.pNumberExpr = new NumberExprElements();
		this.pExpression = new ExpressionElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.eOperator = new OperatorElements();
		this.pEString = new EStringElements();
		this.pTimeSensors = new TimeSensorsElements();
		this.pBooleanExpr = new BooleanExprElements();
		this.pIntExpression = new IntExpressionElements();
		this.pBoolean = new BooleanElements();
		this.pDistanceSensor = new DistanceSensorElements();
		this.eBooleanOperator = new BooleanOperatorElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArithmeticExpr returns ArithmeticExpr:
	//    {ArithmeticExpr}
	//    'ArithmeticExpr'
	//    '{'
	//        ('operator' operator=Operator)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//        ('left' left=NumberExpr)?
	//        ('right' right=NumberExpr)?
	//    '}';
	public ArithmeticExprElements getArithmeticExprAccess() {
		return pArithmeticExpr;
	}
	
	public ParserRule getArithmeticExprRule() {
		return getArithmeticExprAccess().getRule();
	}
	
	//NumberExpr returns NumberExpr:
	//    TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor;
	public NumberExprElements getNumberExprAccess() {
		return pNumberExpr;
	}
	
	public ParserRule getNumberExprRule() {
		return getNumberExprAccess().getRule();
	}
	
	//Expression returns Expression:
	//    TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//VariableDeclaration returns VariableDeclaration:
	//    {VariableDeclaration}
	//    'VariableDeclaration'
	//    name=EString
	//    '{'
	//        ('type' type=EString)?
	//        ('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	//    '}';
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//enum Operator returns Operator:
	//                ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV';
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//TimeSensors returns TimeSensors:
	//    {TimeSensors}
	//    'TimeSensors'
	//    '{'
	//        ('unit' unit=EString)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public TimeSensorsElements getTimeSensorsAccess() {
		return pTimeSensors;
	}
	
	public ParserRule getTimeSensorsRule() {
		return getTimeSensorsAccess().getRule();
	}
	
	//BooleanExpr returns BooleanExpr:
	//    {BooleanExpr}
	//    'BooleanExpr'
	//    '{'
	//        ('operator' operator=BooleanOperator)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//        ('right' right=Expression)?
	//        ('left' left=Expression)?
	//    '}';
	public BooleanExprElements getBooleanExprAccess() {
		return pBooleanExpr;
	}
	
	public ParserRule getBooleanExprRule() {
		return getBooleanExprAccess().getRule();
	}
	
	//IntExpression returns IntExpression:
	//    {IntExpression}
	//    'IntExpression'
	//    '{'
	//        ('value' value=EInt)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//Boolean returns Boolean:
	//    {Boolean}
	//    (value?='value')?
	//    'Boolean'
	//    '{'
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//DistanceSensor returns DistanceSensor:
	//    {DistanceSensor}
	//    'DistanceSensor'
	//    '{'
	//        ('unit' unit=EString)?
	//        ('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	//    '}';
	public DistanceSensorElements getDistanceSensorAccess() {
		return pDistanceSensor;
	}
	
	public ParserRule getDistanceSensorRule() {
		return getDistanceSensorAccess().getRule();
	}
	
	//enum BooleanOperator returns BooleanOperator:
	//                AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER';
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return eBooleanOperator;
	}
	
	public EnumRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
