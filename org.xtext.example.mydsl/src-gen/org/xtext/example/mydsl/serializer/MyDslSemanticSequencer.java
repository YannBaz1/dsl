/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import iDM_DSL.ArithmeticExpr;
import iDM_DSL.BooleanExpr;
import iDM_DSL.DSL_IDMPackage;
import iDM_DSL.DistanceSensor;
import iDM_DSL.IntExpression;
import iDM_DSL.TimeSensors;
import iDM_DSL.VariableDeclaration;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DSL_IDMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DSL_IDMPackage.ARITHMETIC_EXPR:
				sequence_ArithmeticExpr(context, (ArithmeticExpr) semanticObject); 
				return; 
			case DSL_IDMPackage.BOOLEAN:
				sequence_Boolean(context, (iDM_DSL.Boolean) semanticObject); 
				return; 
			case DSL_IDMPackage.BOOLEAN_EXPR:
				sequence_BooleanExpr(context, (BooleanExpr) semanticObject); 
				return; 
			case DSL_IDMPackage.DISTANCE_SENSOR:
				sequence_DistanceSensor(context, (DistanceSensor) semanticObject); 
				return; 
			case DSL_IDMPackage.INT_EXPRESSION:
				sequence_IntExpression(context, (IntExpression) semanticObject); 
				return; 
			case DSL_IDMPackage.TIME_SENSORS:
				sequence_TimeSensors(context, (TimeSensors) semanticObject); 
				return; 
			case DSL_IDMPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArithmeticExpr returns ArithmeticExpr
	 *     NumberExpr returns ArithmeticExpr
	 *     Expression returns ArithmeticExpr
	 *
	 * Constraint:
	 *     (operator=Operator? (newvariable+=VariableDeclaration newvariable+=VariableDeclaration*)? left=NumberExpr? right=NumberExpr?)
	 * </pre>
	 */
	protected void sequence_ArithmeticExpr(ISerializationContext context, ArithmeticExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns BooleanExpr
	 *     BooleanExpr returns BooleanExpr
	 *
	 * Constraint:
	 *     (operator=BooleanOperator? (newvariable+=VariableDeclaration newvariable+=VariableDeclaration*)? right=Expression? left=Expression?)
	 * </pre>
	 */
	protected void sequence_BooleanExpr(ISerializationContext context, BooleanExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Boolean
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     (value?='value'? (newvariable+=VariableDeclaration newvariable+=VariableDeclaration*)?)
	 * </pre>
	 */
	protected void sequence_Boolean(ISerializationContext context, iDM_DSL.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NumberExpr returns DistanceSensor
	 *     Expression returns DistanceSensor
	 *     DistanceSensor returns DistanceSensor
	 *
	 * Constraint:
	 *     (unit=EString? (newvariable+=VariableDeclaration newvariable+=VariableDeclaration*)?)
	 * </pre>
	 */
	protected void sequence_DistanceSensor(ISerializationContext context, DistanceSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NumberExpr returns IntExpression
	 *     Expression returns IntExpression
	 *     IntExpression returns IntExpression
	 *
	 * Constraint:
	 *     (value=EInt? (newvariable+=VariableDeclaration newvariable+=VariableDeclaration*)?)
	 * </pre>
	 */
	protected void sequence_IntExpression(ISerializationContext context, IntExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NumberExpr returns TimeSensors
	 *     Expression returns TimeSensors
	 *     TimeSensors returns TimeSensors
	 *
	 * Constraint:
	 *     (unit=EString? (newvariable+=VariableDeclaration newvariable+=VariableDeclaration*)?)
	 * </pre>
	 */
	protected void sequence_TimeSensors(ISerializationContext context, TimeSensors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=EString type=EString? (expression+=Expression expression+=Expression*)?)
	 * </pre>
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
