// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/iDM_DSL" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ArithmeticExpr returns ArithmeticExpr:
	{ArithmeticExpr}
	'ArithmeticExpr'
	'{'
		('operator' operator=Operator)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		('left' left=NumberExpr)?
		('right' right=NumberExpr)?
	'}';


NumberExpr returns NumberExpr:
	TimeSensors | ArithmeticExpr | IntExpression | DistanceSensor;

Expression returns Expression:
	TimeSensors | ArithmeticExpr | BooleanExpr | IntExpression | Boolean | DistanceSensor;

VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration}
	'VariableDeclaration'
	name=EString
	'{'
		('type' type=EString)?
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
	'}';

enum Operator returns Operator:
				ADD = 'ADD' | SUB = 'SUB' | MUL = 'MUL' | DIV = 'DIV';

EString returns ecore::EString:
	STRING | ID;

TimeSensors returns TimeSensors:
	{TimeSensors}
	'TimeSensors'
	'{'
		('unit' unit=EString)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

BooleanExpr returns BooleanExpr:
	{BooleanExpr}
	'BooleanExpr'
	'{'
		('operator' operator=BooleanOperator)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
		('right' right=Expression)?
		('left' left=Expression)?
	'}';

IntExpression returns IntExpression:
	{IntExpression}
	'IntExpression'
	'{'
		('value' value=EInt)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

Boolean returns Boolean:
	{Boolean}
	(value?='value')?
	'Boolean'
	'{'
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

DistanceSensor returns DistanceSensor:
	{DistanceSensor}
	'DistanceSensor'
	'{'
		('unit' unit=EString)?
		('newvariable' '{' newvariable+=VariableDeclaration ( "," newvariable+=VariableDeclaration)* '}' )?
	'}';

enum BooleanOperator returns BooleanOperator:
				AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUALS = 'EQUALS' | LESS = 'LESS' | GREATER = 'GREATER';

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
