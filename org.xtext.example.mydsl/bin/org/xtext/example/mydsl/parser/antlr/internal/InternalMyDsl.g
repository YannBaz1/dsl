/*
 * generated by Xtext 2.38.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ArithmeticExpr";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleArithmeticExpr
entryRuleArithmeticExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExprRule()); }
	iv_ruleArithmeticExpr=ruleArithmeticExpr
	{ $current=$iv_ruleArithmeticExpr.current; }
	EOF;

// Rule ArithmeticExpr
ruleArithmeticExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArithmeticExprAccess().getArithmeticExprAction_0(),
					$current);
			}
		)
		otherlv_1='ArithmeticExpr'
		{
			newLeafNode(otherlv_1, grammarAccess.getArithmeticExprAccess().getArithmeticExprKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getArithmeticExprAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='operator'
			{
				newLeafNode(otherlv_3, grammarAccess.getArithmeticExprAccess().getOperatorKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExprAccess().getOperatorOperatorEnumRuleCall_3_1_0());
					}
					lv_operator_4_0=ruleOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_4_0,
							"org.xtext.example.mydsl.MyDsl.Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='newvariable'
			{
				newLeafNode(otherlv_5, grammarAccess.getArithmeticExprAccess().getNewvariableKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getArithmeticExprAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExprAccess().getNewvariableVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_newvariable_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExprRule());
						}
						add(
							$current,
							"newvariable",
							lv_newvariable_7_0,
							"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getArithmeticExprAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArithmeticExprAccess().getNewvariableVariableDeclarationParserRuleCall_4_3_1_0());
						}
						lv_newvariable_9_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArithmeticExprRule());
							}
							add(
								$current,
								"newvariable",
								lv_newvariable_9_0,
								"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getArithmeticExprAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_11='left'
			{
				newLeafNode(otherlv_11, grammarAccess.getArithmeticExprAccess().getLeftKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExprAccess().getLeftNumberExprParserRuleCall_5_1_0());
					}
					lv_left_12_0=ruleNumberExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExprRule());
						}
						set(
							$current,
							"left",
							lv_left_12_0,
							"org.xtext.example.mydsl.MyDsl.NumberExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_13='right'
			{
				newLeafNode(otherlv_13, grammarAccess.getArithmeticExprAccess().getRightKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArithmeticExprAccess().getRightNumberExprParserRuleCall_6_1_0());
					}
					lv_right_14_0=ruleNumberExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithmeticExprRule());
						}
						set(
							$current,
							"right",
							lv_right_14_0,
							"org.xtext.example.mydsl.MyDsl.NumberExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getArithmeticExprAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleNumberExpr
entryRuleNumberExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberExprRule()); }
	iv_ruleNumberExpr=ruleNumberExpr
	{ $current=$iv_ruleNumberExpr.current; }
	EOF;

// Rule NumberExpr
ruleNumberExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumberExprAccess().getTimeSensorsParserRuleCall_0());
		}
		this_TimeSensors_0=ruleTimeSensors
		{
			$current = $this_TimeSensors_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberExprAccess().getArithmeticExprParserRuleCall_1());
		}
		this_ArithmeticExpr_1=ruleArithmeticExpr
		{
			$current = $this_ArithmeticExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberExprAccess().getIntExpressionParserRuleCall_2());
		}
		this_IntExpression_2=ruleIntExpression
		{
			$current = $this_IntExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberExprAccess().getDistanceSensorParserRuleCall_3());
		}
		this_DistanceSensor_3=ruleDistanceSensor
		{
			$current = $this_DistanceSensor_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTimeSensorsParserRuleCall_0());
		}
		this_TimeSensors_0=ruleTimeSensors
		{
			$current = $this_TimeSensors_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getArithmeticExprParserRuleCall_1());
		}
		this_ArithmeticExpr_1=ruleArithmeticExpr
		{
			$current = $this_ArithmeticExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExprParserRuleCall_2());
		}
		this_BooleanExpr_2=ruleBooleanExpr
		{
			$current = $this_BooleanExpr_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIntExpressionParserRuleCall_3());
		}
		this_IntExpression_3=ruleIntExpression
		{
			$current = $this_IntExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBooleanParserRuleCall_4());
		}
		this_Boolean_4=ruleBoolean
		{
			$current = $this_Boolean_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getDistanceSensorParserRuleCall_5());
		}
		this_DistanceSensor_5=ruleDistanceSensor
		{
			$current = $this_DistanceSensor_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VariableDeclaration'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getVariableDeclarationKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='type'
			{
				newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getTypeKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeEStringParserRuleCall_4_1_0());
					}
					lv_type_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='expression'
			{
				newLeafNode(otherlv_6, grammarAccess.getVariableDeclarationAccess().getExpressionKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getVariableDeclarationAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_5_2_0());
					}
					lv_expression_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						add(
							$current,
							"expression",
							lv_expression_8_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getVariableDeclarationAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_5_3_1_0());
						}
						lv_expression_10_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
							}
							add(
								$current,
								"expression",
								lv_expression_10_0,
								"org.xtext.example.mydsl.MyDsl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getVariableDeclarationAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getVariableDeclarationAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTimeSensors
entryRuleTimeSensors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeSensorsRule()); }
	iv_ruleTimeSensors=ruleTimeSensors
	{ $current=$iv_ruleTimeSensors.current; }
	EOF;

// Rule TimeSensors
ruleTimeSensors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTimeSensorsAccess().getTimeSensorsAction_0(),
					$current);
			}
		)
		otherlv_1='TimeSensors'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeSensorsAccess().getTimeSensorsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeSensorsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='unit'
			{
				newLeafNode(otherlv_3, grammarAccess.getTimeSensorsAccess().getUnitKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTimeSensorsAccess().getUnitEStringParserRuleCall_3_1_0());
					}
					lv_unit_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTimeSensorsRule());
						}
						set(
							$current,
							"unit",
							lv_unit_4_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='newvariable'
			{
				newLeafNode(otherlv_5, grammarAccess.getTimeSensorsAccess().getNewvariableKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getTimeSensorsAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTimeSensorsAccess().getNewvariableVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_newvariable_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTimeSensorsRule());
						}
						add(
							$current,
							"newvariable",
							lv_newvariable_7_0,
							"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getTimeSensorsAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTimeSensorsAccess().getNewvariableVariableDeclarationParserRuleCall_4_3_1_0());
						}
						lv_newvariable_9_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTimeSensorsRule());
							}
							add(
								$current,
								"newvariable",
								lv_newvariable_9_0,
								"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getTimeSensorsAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getTimeSensorsAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBooleanExpr
entryRuleBooleanExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExprRule()); }
	iv_ruleBooleanExpr=ruleBooleanExpr
	{ $current=$iv_ruleBooleanExpr.current; }
	EOF;

// Rule BooleanExpr
ruleBooleanExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanExprAccess().getBooleanExprAction_0(),
					$current);
			}
		)
		otherlv_1='BooleanExpr'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanExprAccess().getBooleanExprKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanExprAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='operator'
			{
				newLeafNode(otherlv_3, grammarAccess.getBooleanExprAccess().getOperatorKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExprAccess().getOperatorBooleanOperatorEnumRuleCall_3_1_0());
					}
					lv_operator_4_0=ruleBooleanOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_4_0,
							"org.xtext.example.mydsl.MyDsl.BooleanOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='newvariable'
			{
				newLeafNode(otherlv_5, grammarAccess.getBooleanExprAccess().getNewvariableKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getBooleanExprAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExprAccess().getNewvariableVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_newvariable_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExprRule());
						}
						add(
							$current,
							"newvariable",
							lv_newvariable_7_0,
							"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getBooleanExprAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBooleanExprAccess().getNewvariableVariableDeclarationParserRuleCall_4_3_1_0());
						}
						lv_newvariable_9_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBooleanExprRule());
							}
							add(
								$current,
								"newvariable",
								lv_newvariable_9_0,
								"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getBooleanExprAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_11='right'
			{
				newLeafNode(otherlv_11, grammarAccess.getBooleanExprAccess().getRightKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExprAccess().getRightExpressionParserRuleCall_5_1_0());
					}
					lv_right_12_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExprRule());
						}
						set(
							$current,
							"right",
							lv_right_12_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_13='left'
			{
				newLeafNode(otherlv_13, grammarAccess.getBooleanExprAccess().getLeftKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExprAccess().getLeftExpressionParserRuleCall_6_1_0());
					}
					lv_left_14_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExprRule());
						}
						set(
							$current,
							"left",
							lv_left_14_0,
							"org.xtext.example.mydsl.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getBooleanExprAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntExpressionAccess().getIntExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='IntExpression'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntExpressionAccess().getIntExpressionKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntExpressionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='value'
			{
				newLeafNode(otherlv_3, grammarAccess.getIntExpressionAccess().getValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntExpressionAccess().getValueEIntParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"org.xtext.example.mydsl.MyDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='newvariable'
			{
				newLeafNode(otherlv_5, grammarAccess.getIntExpressionAccess().getNewvariableKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getIntExpressionAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntExpressionAccess().getNewvariableVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_newvariable_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntExpressionRule());
						}
						add(
							$current,
							"newvariable",
							lv_newvariable_7_0,
							"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getIntExpressionAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getIntExpressionAccess().getNewvariableVariableDeclarationParserRuleCall_4_3_1_0());
						}
						lv_newvariable_9_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIntExpressionRule());
							}
							add(
								$current,
								"newvariable",
								lv_newvariable_9_0,
								"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getIntExpressionAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getIntExpressionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanAccess().getBooleanAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0='value'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBooleanAccess().getValueValueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanRule());
					}
					setWithLastConsumed($current, "value", lv_value_1_0 != null, "value");
				}
			)
		)?
		otherlv_2='Boolean'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanAccess().getBooleanKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getBooleanAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='newvariable'
			{
				newLeafNode(otherlv_4, grammarAccess.getBooleanAccess().getNewvariableKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getBooleanAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanAccess().getNewvariableVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_newvariable_6_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanRule());
						}
						add(
							$current,
							"newvariable",
							lv_newvariable_6_0,
							"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getBooleanAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBooleanAccess().getNewvariableVariableDeclarationParserRuleCall_4_3_1_0());
						}
						lv_newvariable_8_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBooleanRule());
							}
							add(
								$current,
								"newvariable",
								lv_newvariable_8_0,
								"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getBooleanAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getBooleanAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDistanceSensor
entryRuleDistanceSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDistanceSensorRule()); }
	iv_ruleDistanceSensor=ruleDistanceSensor
	{ $current=$iv_ruleDistanceSensor.current; }
	EOF;

// Rule DistanceSensor
ruleDistanceSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDistanceSensorAccess().getDistanceSensorAction_0(),
					$current);
			}
		)
		otherlv_1='DistanceSensor'
		{
			newLeafNode(otherlv_1, grammarAccess.getDistanceSensorAccess().getDistanceSensorKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDistanceSensorAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='unit'
			{
				newLeafNode(otherlv_3, grammarAccess.getDistanceSensorAccess().getUnitKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDistanceSensorAccess().getUnitEStringParserRuleCall_3_1_0());
					}
					lv_unit_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDistanceSensorRule());
						}
						set(
							$current,
							"unit",
							lv_unit_4_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='newvariable'
			{
				newLeafNode(otherlv_5, grammarAccess.getDistanceSensorAccess().getNewvariableKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getDistanceSensorAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDistanceSensorAccess().getNewvariableVariableDeclarationParserRuleCall_4_2_0());
					}
					lv_newvariable_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDistanceSensorRule());
						}
						add(
							$current,
							"newvariable",
							lv_newvariable_7_0,
							"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getDistanceSensorAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDistanceSensorAccess().getNewvariableVariableDeclarationParserRuleCall_4_3_1_0());
						}
						lv_newvariable_9_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDistanceSensorRule());
							}
							add(
								$current,
								"newvariable",
								lv_newvariable_9_0,
								"org.xtext.example.mydsl.MyDsl.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getDistanceSensorAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getDistanceSensorAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ADD'
			{
				$current = grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SUB'
			{
				$current = grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='MUL'
			{
				$current = grammarAccess.getOperatorAccess().getMULEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getMULEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DIV'
			{
				$current = grammarAccess.getOperatorAccess().getDIVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getDIVEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule BooleanOperator
ruleBooleanOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AND'
			{
				$current = grammarAccess.getBooleanOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OR'
			{
				$current = grammarAccess.getBooleanOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='NOT'
			{
				$current = grammarAccess.getBooleanOperatorAccess().getNOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBooleanOperatorAccess().getNOTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='EQUALS'
			{
				$current = grammarAccess.getBooleanOperatorAccess().getEQUALSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBooleanOperatorAccess().getEQUALSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='LESS'
			{
				$current = grammarAccess.getBooleanOperatorAccess().getLESSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBooleanOperatorAccess().getLESSEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='GREATER'
			{
				$current = grammarAccess.getBooleanOperatorAccess().getGREATEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBooleanOperatorAccess().getGREATEREnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
