/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final /* ArithmeticExpr */Object arithmeticExpr, @Extension final IFormattableDocument document) {
    throw new Error("Unresolved compilation problems:"
      + "\nnewvariable cannot be resolved"
      + "\nformat cannot be resolved"
      + "\nleft cannot be resolved"
      + "\nformat cannot be resolved"
      + "\nright cannot be resolved"
      + "\nformat cannot be resolved");
  }

  protected void _format(final /* VariableDeclaration */Object variableDeclaration, @Extension final IFormattableDocument document) {
    throw new Error("Unresolved compilation problems:"
      + "\nexpression cannot be resolved"
      + "\nformat cannot be resolved");
  }

  @XbaseGenerated
  public void format(final Object arithmeticExpr, final IFormattableDocument document) {
    if (arithmeticExpr instanceof XtextResource) {
      _format((XtextResource)arithmeticExpr, document);
      return;
    } else if (arithmeticExpr instanceof EObject) {
      _format((EObject)arithmeticExpr, document);
      return;
    } else if (arithmeticExpr == null) {
      _format((Void)null, document);
      return;
    } else if (arithmeticExpr != null) {
      _format(arithmeticExpr, document);
      return;
    } else if (arithmeticExpr != null) {
      _format(arithmeticExpr, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(arithmeticExpr, document).toString());
    }
  }
}
